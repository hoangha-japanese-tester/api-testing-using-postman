{
	"info": {
		"_postman_id": "aa70e2d2-190d-483a-af48-7dcb07e72721",
		"name": "API Login_Verify Login with positive test cases AND Token(SessionID) value",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16137040",
		"_collection_link": "https://lively-spaceship-121921.postman.co/workspace/hogo-api-testing~745d5885-42d4-427f-9740-17ba824966cb/collection/16137040-aa70e2d2-190d-483a-af48-7dcb07e72721?action=share&source=collection_link&creator=16137040"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Verify respone Body\r",
							"// Extract the JSON data from the response\r",
							"let dataResponse = pm.response.json();\r",
							"// Get test data sets from environment\r",
							"let testData = JSON.parse(pm.environment.get(\"testData\"))\r",
							"// Get current test data for this interaction from environment\r",
							"let currentTestData = JSON.parse(pm.environment.get(\"currentTestData\"))\r",
							"// Get schema\r",
							"let schema = JSON.parse(pm.environment.get(\"schema\"))\r",
							"\r",
							"// Write assertion to check\r",
							"// Verify http status code vÃ  http code name\r",
							"pm.test(\"TC\" + currentTestData.TestcaseID + \" : Verify http status code is \" + currentTestData.httpStatusCode, function () {\r",
							"      pm.expect(pm.response.code).to.eq(currentTestData.httpStatusCode);\r",
							"});\r",
							"// Verify http code name\r",
							"pm.test(\"Verify http status code name is \" + currentTestData.httpStatusCodeName, function () {\r",
							"      pm.expect(pm.response.reason()).to.eq(currentTestData.httpStatusCodeName)\r",
							"});\r",
							"// Verify body\r",
							"pm.test(currentTestData.TestcaseName + \". Respone Status = \" + dataResponse.status + \". Token = \" + dataResponse.token, function () {\r",
							"      pm.expect(dataResponse.status).to.eql(currentTestData.statusResField);\r",
							"});\r",
							"// Verify schema\r",
							"pm.test(\"Verify schema\", function () {\r",
							"      pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3. Prepare data for checking session expiration\r",
							"// Retrieve Token retured from API\r",
							"let token = dataResponse.token;\r",
							"// Retrieve and parse the \"remainSessionArray\", \"expiredSessionArray\" from the environment to an array\r",
							"let remainSessionArray = JSON.parse(pm.environment.get(\"remainSessionArray\"));\r",
							"let expiredSessionArray = JSON.parse(pm.environment.get(\"expiredSessionArray\"));\r",
							"\r",
							"// Check if the currentTestData's SessionStatus is set to \"remain\"\r",
							"if (currentTestData.SessionStatus === \"remain\") {\r",
							"      // Create object for remaining sessions with relevant details\r",
							"      let remainSessionObj = {\r",
							"            \"TestcaseID\": currentTestData.TestcaseID,\r",
							"            \"GetDocumentStatus\": currentTestData.getDocumentStatus,\r",
							"            \"Token\": token\r",
							"      }\r",
							"      // Add the remainSessionObj to the remainSessionArray and set remainSessionArray into the environment\r",
							"      remainSessionArray.push(remainSessionObj)\r",
							"      pm.environment.set(\"remainSessionArray\", JSON.stringify(remainSessionArray));\r",
							"} else { // If not remaining session\r",
							"      // Create object for expired sessions with relevant details\r",
							"      let expiredSessionObj = {\r",
							"            \"TestcaseID\": currentTestData.TestcaseID,\r",
							"            \"GetDocumentStatus\": currentTestData.getDocumentStatus,\r",
							"            \"Token\": token\r",
							"      }\r",
							"      // Add the expiredSessionObj to the expiredSessionArray and set expiredSessionArray into the environment\r",
							"      expiredSessionArray.push(expiredSessionObj)\r",
							"      pm.environment.set(\"expiredSessionArray\", JSON.stringify(expiredSessionArray));\r",
							"}\r",
							"// If there is more test data to process\r",
							"if (testData.length > 0) {\r",
							"      // If there are remaining test cases, set the next request to \"Login\" for the next iteration\r",
							"      postman.setNextRequest(\"Login\")\r",
							"} else { // If no more test data\r",
							"      // Set a timer for 31 minutes before triggering the next request\r",
							"      setTimeout(() => {\r",
							"            postman.setNextRequest(\"GetDoc_Verify KeepMeLogin = true\")\r",
							"      }, 3000); // 31 minutes\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// 1. Prepare test data sets\r",
							"// Retrieve firstLogin variable from the environment\r",
							"let isfirstLogin = pm.environment.get(\"isfirstLogin\")\r",
							"// If this is the first time calling the API Login, we will set up test data.\r",
							"// If this is not the first time calling the API Login, we will use the test data retrieved from the environment.\r",
							"if (!isfirstLogin) {\r",
							"      // Set up test data as an array of objects\r",
							"      isfirstLogin = true\r",
							"      // Set up test data as an array of objects. We perform API Login with using 10 different test data sets.\r",
							"      let testData = [\r",
							"            {\r",
							"                  \"TestcaseID\": \"1\",\r",
							"                  \"TestcaseName\": \"Login successfully with: valid required EmailAddress and Password (encoded MD5)\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": null,\r",
							"                  \"ExtraValue\": null,\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"expired\",\r",
							"                  \"getDocumentStatus\": \"SessionIdNotFound\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": \"2\",\r",
							"                  \"TestcaseName\": \"Login successfully with: valid required EmailAddress, Password (encoded MD5), AND valid optional KeepMeLogin = true\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": true,\r",
							"                  \"ExtraValue\": null,\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"remain\",\r",
							"                  \"getDocumentStatus\": \"OK\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": \"3\",\r",
							"                  \"TestcaseName\": \"Login successfully with: valid required EmailAddress, Password (encoded MD5), AND valid optional KeepMeLogin = TRUE\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": \"TRUE\",\r",
							"                  \"ExtraValue\": null,\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"remain\",\r",
							"                  \"getDocumentStatus\": \"OK\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": \"4\",\r",
							"                  \"TestcaseName\": \"Login successfully with: valid required EmailAddress, Password (encoded MD5), AND valid optional KeepMeLogin = false\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": false,\r",
							"                  \"ExtraValue\": null,\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"expired\",\r",
							"                  \"getDocumentStatus\": \"SessionIdNotFound\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": \"5\",\r",
							"                  \"TestcaseName\": \"Login successfully with: valid required EmailAddress, Password (encoded MD5), AND valid optional KeepMeLogin = FALSE\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": \"FALSE\",\r",
							"                  \"ExtraValue\": null,\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"expired\",\r",
							"                  \"getDocumentStatus\": \"SessionIdNotFound\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": \"6\",\r",
							"                  \"TestcaseName\": \"Login successfully with: valid required EmailAddress, Password (encoded MD5), AND valid optional KeepMeLogin =  ' '\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": \"\",\r",
							"                  \"ExtraValue\": null,\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"expired\",\r",
							"                  \"getDocumentStatus\": \"SessionIdNotFound\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": \"7\",\r",
							"                  \"TestcaseName\": \"Login successfully with: valid required EmailAddress, Password (encoded MD5), AND valid optional KeepMeLogin =  1\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": 1,\r",
							"                  \"ExtraValue\": null,\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"expired\",\r",
							"                  \"getDocumentStatus\": \"SessionIdNotFound\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": \"8\",\r",
							"                  \"TestcaseName\": \"Login successfully with: valid required EmailAddress, Password (encoded MD5), AND valid optional KeepMeLogin =  abc\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": \"abc\",\r",
							"                  \"ExtraValue\": null,\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"expired\",\r",
							"                  \"getDocumentStatus\": \"SessionIdNotFound\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": \"9\",\r",
							"                  \"TestcaseName\": \"Login successfully with the valid EmailAddress is Uppercase characters\",\r",
							"                  \"EmailAddress\": \"APITESTINGWITHME@GMAIL.COM\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": null,\r",
							"                  \"ExtraValue\": null,\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"expired\",\r",
							"                  \"getDocumentStatus\": \"SessionIdNotFound\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": \"10\",\r",
							"                  \"TestcaseName\": \"Login successfully with adding more field\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"KeepMeLogin\": null,\r",
							"                  \"ExtraValue\": \"xyz\",\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"OK\",\r",
							"                  \"SessionStatus\": \"expired\",\r",
							"                  \"getDocumentStatus\": \"SessionIdNotFound\"\r",
							"            }\r",
							"      ]\r",
							"      // Define Schema\r",
							"      let schema = {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                  \"status\",\r",
							"                  \"token\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                  \"status\": {\r",
							"                        \"type\": \"string\"\r",
							"                  },\r",
							"                  \"token\": {\r",
							"                        \"type\": \"string\"\r",
							"                  }\r",
							"            }\r",
							"      }\r",
							"      // Update environment with new Test Data\r",
							"      pm.environment.set(\"isfirstLogin\", isfirstLogin);\r",
							"      pm.environment.set(\"testData\", JSON.stringify(testData));\r",
							"      pm.environment.set(\"schema\", JSON.stringify(schema));\r",
							"      // Initialize 2 empty arrays to store TOKENs\r",
							"      pm.environment.set(\"remainSessionArray\", \"[]\");\r",
							"      pm.environment.set(\"expiredSessionArray\", \"[]\");\r",
							"}\r",
							"\r",
							"// Retrieve testData from the environment\r",
							"let testData = JSON.parse(pm.environment.get(\"testData\"))\r",
							"// Get the first test data set\r",
							"let currentTestData = testData.shift()\r",
							"// Initialize environment variables for the current iteration\r",
							"pm.environment.set(\"currentTestData\", JSON.stringify(currentTestData))\r",
							"pm.environment.set(\"testData\", JSON.stringify(testData))\r",
							"pm.environment.set(\"currentEmailAddress\", currentTestData.EmailAddress)\r",
							"pm.environment.set(\"currentPassword\", currentTestData.Password)\r",
							"pm.environment.set(\"currentKeepMeLogin\", currentTestData.KeepMeLogin)\r",
							"pm.environment.set(\"currentExtraValue\", currentTestData.ExtraValue)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded____________",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/HoGo/api/v1/Login?EmailAddress={{currentEmailAddress}}&Password={{currentPassword}}&KeepMeLogin={{currentKeepMeLogin}}&abc={{currentExtraValue}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"HoGo",
						"api",
						"v1",
						"Login"
					],
					"query": [
						{
							"key": "EmailAddress",
							"value": "{{currentEmailAddress}}"
						},
						{
							"key": "Password",
							"value": "{{currentPassword}}"
						},
						{
							"key": "KeepMeLogin",
							"value": "{{currentKeepMeLogin}}"
						},
						{
							"key": "abc",
							"value": "{{currentExtraValue}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetDoc_Verify KeepMeLogin = true",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Write assertion\r",
							"// Retrieve \"remainSessionArray\",\"currentRemainSessionObj\" from environment\r",
							"let remainSessionArray = JSON.parse(pm.environment.get(\"remainSessionArray\"))\r",
							"let currentRemainSessionObj = JSON.parse(pm.environment.get(\"currentRemainSessionObj\"))\r",
							"\r",
							"//Verify if Get Document is successful with provided Tokens\r",
							"pm.test(\"TC\" + currentRemainSessionObj.TestcaseID + \": Get Document is successful. Status = \" + currentRemainSessionObj.GetDocumentStatus + \". Token = \" + currentRemainSessionObj.Token, function () {\r",
							"      pm.expect(pm.response.json().status).to.eql(currentRemainSessionObj.GetDocumentStatus);\r",
							"      pm.expect(pm.response.text()).to.include(\"detail\")\r",
							"});\r",
							"\r",
							"// Check if All tokens have already performed\r",
							"if (remainSessionArray.length > 0) {\r",
							"      // If not yet, call API \"GetDoc_Verify KeepMeLogin = true\" again\r",
							"      postman.setNextRequest(\"GetDoc_Verify KeepMeLogin = true\");\r",
							"} else {\r",
							"      // If already, call API \"GetDoc_Verify KeepMeLogin = false\" to verify the Session expired case\r",
							"      postman.setNextRequest(\"GetDoc_Verify KeepMeLogin = false\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// 4. Prepare Testdata (Tokens) for the Session remain case\r",
							"\r",
							"// Retrieve and parse the \"remainSessionArray\" from the Postman environment to an array\r",
							"let remainSessionArray = JSON.parse(pm.environment.get(\"remainSessionArray\"))\r",
							"// Get the first element from the remainSessionArray and store it in currentRemainSessionObj\r",
							"let currentRemainSessionObj = remainSessionArray.shift()\r",
							"\r",
							"// Set test data into the environment\r",
							"pm.environment.set(\"currentToken\", currentRemainSessionObj.Token)\r",
							"pm.environment.set(\"currentRemainSessionObj\", JSON.stringify(currentRemainSessionObj))\r",
							"pm.environment.set(\"remainSessionArray\", JSON.stringify(remainSessionArray))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/HoGo/api/v1/GetDocumentDetail?SessionID={{currentToken}}&DocumentID=7ae93eae7bea4cb2b6b8ab10569e10e4",
					"host": [
						"{{url}}"
					],
					"path": [
						"HoGo",
						"api",
						"v1",
						"GetDocumentDetail"
					],
					"query": [
						{
							"key": "SessionID",
							"value": "{{currentToken}}"
						},
						{
							"key": "DocumentID",
							"value": "7ae93eae7bea4cb2b6b8ab10569e10e4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetDoc_Verify KeepMeLogin = false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 7. Write assertion\r",
							"// Retrieve \"expiredSessionArray\",\"currentExpiredSessionObj\" from environment\r",
							"let expiredSessionArray = JSON.parse(pm.environment.get(\"expiredSessionArray\"))\r",
							"let currentExpiredSessionObj = JSON.parse(pm.environment.get(\"currentExpiredSessionObj\"))\r",
							"\r",
							"//Verify if Get Document fails with provided Tokens\r",
							"pm.test(\"TC\" + currentExpiredSessionObj.TestcaseID + \": Get Document fails. Status = \" + currentExpiredSessionObj.GetDocumentStatus + \". Token = \" + currentExpiredSessionObj.Token, function () {\r",
							"      pm.expect(pm.response.json().status).to.eql(currentExpiredSessionObj.GetDocumentStatus);\r",
							"});\r",
							"\r",
							"// 8. Check if All tokens have already performed\r",
							"if (expiredSessionArray.length > 0) {\r",
							"      // If not yet, call API \"GetDoc_Verify KeepMeLogin = false\" again\r",
							"      postman.setNextRequest(\"GetDoc_Verify KeepMeLogin = false\");\r",
							"} else {\r",
							"      // If already, finish test.\r",
							"      postman.setNextRequest(null);\r",
							"      // \r",
							"      // 9. Clear variable in the environment\r",
							"      // Define an array of common variables to be retained\r",
							"      let commonVariables = [\"url\"];\r",
							"      // Convert all environment variables to an object for iteration\r",
							"      let environmentVariables = pm.environment.toObject();\r",
							"      // Loop through the environment variables and if that variable doesn't exist in commonVariables, delete it.\r",
							"      for (let variable in environmentVariables) {\r",
							"            if (!commonVariables.includes(variable)) {\r",
							"                  pm.environment.unset(variable);\r",
							"            }\r",
							"      }\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// 6. Prepare Testdata (Tokens) for the Session expire case\r",
							"\r",
							"// Retrieve and parse the \"expiredSessionArray\" from the Postman environment to an array\r",
							"let expiredSessionArray = JSON.parse(pm.environment.get(\"expiredSessionArray\"))\r",
							"// Get the first element from the expiredSessionArray and store it in currentExpiredSessionObj\r",
							"let currentExpiredSessionObj = expiredSessionArray.shift()\r",
							"\r",
							"// Set test data into the environment\r",
							"pm.environment.set(\"currentToken\", currentExpiredSessionObj.Token)\r",
							"pm.environment.set(\"currentExpiredSessionObj\", JSON.stringify(currentExpiredSessionObj))\r",
							"pm.environment.set(\"expiredSessionArray\", JSON.stringify(expiredSessionArray))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/HoGo/api/v1/GetDocumentDetail?SessionID={{currentToken}}&DocumentID=7ae93eae7bea4cb2b6b8ab10569e10e4",
					"host": [
						"{{url}}"
					],
					"path": [
						"HoGo",
						"api",
						"v1",
						"GetDocumentDetail"
					],
					"query": [
						{
							"key": "SessionID",
							"value": "{{currentToken}}"
						},
						{
							"key": "DocumentID",
							"value": "7ae93eae7bea4cb2b6b8ab10569e10e4"
						}
					]
				}
			},
			"response": []
		}
	]
}