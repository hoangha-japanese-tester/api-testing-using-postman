{
	"info": {
		"_postman_id": "df0a0e1c-dd1f-45db-9148-3aa7030895e8",
		"name": "API Login_Verify Login Fail With Invalid Account",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16137040",
		"_collection_link": "https://lively-spaceship-121921.postman.co/workspace/hogo-api-testing~745d5885-42d4-427f-9740-17ba824966cb/collection/16137040-df0a0e1c-dd1f-45db-9148-3aa7030895e8?action=share&source=collection_link&creator=16137040"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Verify respone Body\r",
							"// Extract the JSON data from the response\r",
							"let dataResponse = pm.response.json();\r",
							"// Get test data sets from environment\r",
							"let testData = JSON.parse(pm.environment.get(\"testData\"))\r",
							"// Get current test data for this interaction from environment\r",
							"let currentTestData = JSON.parse(pm.environment.get(\"currentTestData\"))\r",
							"// Get schema\r",
							"let schema = JSON.parse(pm.environment.get(\"schema\"))\r",
							"\r",
							"// Write assertion to check\r",
							"// Verify http status code vÃ  http code name\r",
							"pm.test(\"TC\" + currentTestData.TestcaseID + \" : Verify http status code is \" + currentTestData.httpStatusCode, function () {\r",
							"      pm.expect(pm.response.code).to.eq(currentTestData.httpStatusCode);\r",
							"});\r",
							"// Verify http code name\r",
							"pm.test(\"Verify http status code name is \" + currentTestData.httpStatusCodeName, function () {\r",
							"      pm.expect(pm.response.reason()).to.eq(currentTestData.httpStatusCodeName)\r",
							"});\r",
							"// Verify body\r",
							"pm.test(currentTestData.TestcaseName + \". Respone Status = \" + dataResponse.status, function () {\r",
							"      pm.expect(dataResponse.status).to.eql(currentTestData.statusResField);\r",
							"});\r",
							"\r",
							"pm.test(currentTestData.TestcaseName + \". Respone Status Description = \" + dataResponse.status_desc, function () {\r",
							"      pm.expect(dataResponse.status_desc).to.eql(currentTestData.status_descResField);\r",
							"});\r",
							"// Verify schema\r",
							"pm.test(\"Verify schema\", function () {\r",
							"      pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3. Check if there is more test data to process\r",
							"if (testData.length > 0) {\r",
							"      // If there are remaining test cases, set the next request to \"Login\" for the next iteration\r",
							"      postman.setNextRequest(\"Login\")\r",
							"} else {\r",
							"      // If already, finish test.\r",
							"      postman.setNextRequest(null);\r",
							"\r",
							"      // 4. Clear variable in the environment\r",
							"      // Define an array of common variables to be retained\r",
							"      let commonVariables = [\"url\"];\r",
							"      // Convert all environment variables to an object for iteration\r",
							"      let environmentVariables = pm.environment.toObject();\r",
							"      // Loop through the environment variables and if that variable doesn't exist in commonVariables, delete it.\r",
							"      for (let variable in environmentVariables) {\r",
							"            if (!commonVariables.includes(variable)) {\r",
							"                  pm.environment.unset(variable);\r",
							"            }\r",
							"      }\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// 1. Prepare test data sets\r",
							"// Retrieve firstLogin variable from the environment\r",
							"let isfirstLogin = pm.environment.get(\"isfirstLogin\")\r",
							"// If this is the first time calling the API Login, we will set up test data.\r",
							"// If this is not the first time calling the API Login, we will use the test data retrieved from the environment.\r",
							"if (!isfirstLogin) {\r",
							"      let isfirstLogin = true\r",
							"      // Set up test data as an array of objects. We perform API Login with using 7 different test data sets.\r",
							"      let testData = [\r",
							"            {\r",
							"                  \"TestcaseID\": 1,\r",
							"                  \"TestcaseName\": \"Verify login failed with invalid EmailAddress, valid Password (encoded MD5)\",\r",
							"                  \"EmailAddress\": \"apitestingwithme_@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"ExpectedResult\": \"Login failed\",\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"WrongPassword\",\r",
							"                  \"status_descResField\": \"Password did not match\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": 2,\r",
							"                  \"TestcaseName\": \"Verify login failed with valid EmailAddress, invalid password (encoded MD5)\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36_\",\r",
							"                  \"ExpectedResult\": \"Login failed\",\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"WrongPassword\",\r",
							"                  \"status_descResField\": \"Password did not match\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": 3,\r",
							"                  \"TestcaseName\": \"Verify login failed with valid EmailAddress, invalid Password(not encoded MD5)\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"apitesting123\",\r",
							"                  \"ExpectedResult\": \"Login failed\",\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"WrongPassword\",\r",
							"                  \"status_descResField\": \"Password did not match\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": 4,\r",
							"                  \"TestcaseName\": \"Verify login failed with valid EmailAddress, invalid Password (value before changed pass)\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"3e9688b79d9562b1624ec475db5d2294\",\r",
							"                  \"ExpectedResult\": \"Login failed\",\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"WrongPassword\",\r",
							"                  \"status_descResField\": \"Password did not match\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": 5,\r",
							"                  \"TestcaseName\": \"Verify login failed with empty EmailAddress, valid Password\",\r",
							"                  \"EmailAddress\": \"\",\r",
							"                  \"Password\": \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
							"                  \"ExpectedResult\": \"Login failed\",\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"InputParameterError\",\r",
							"                  \"status_descResField\": \"Required input parameters were not found\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": 6,\r",
							"                  \"TestcaseName\": \"Verify login failed with valid EmailAddress, empty Password\",\r",
							"                  \"EmailAddress\": \"apitestingwithme@gmail.com\",\r",
							"                  \"Password\": \"\",\r",
							"                  \"ExpectedResult\": \"Login failed\",\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"InputParameterError\",\r",
							"                  \"status_descResField\": \"Required input parameters were not found\"\r",
							"            },\r",
							"            {\r",
							"                  \"TestcaseID\": 7,\r",
							"                  \"TestcaseName\": \"Verify login failed with account is not activated\",\r",
							"                  \"EmailAddress\": \"eom1hc@gmail.com\",\r",
							"                  \"Password\": \"3e9688b79d9562b1624ec475db5d2294\",\r",
							"                  \"ExpectedResult\": \"Login failed\",\r",
							"                  \"httpStatusCode\": 200,\r",
							"                  \"httpStatusCodeName\": \"OK\",\r",
							"                  \"statusResField\": \"WrongPassword\",\r",
							"                  \"status_descResField\": \"Password did not match\"\r",
							"            }\r",
							"      ]\r",
							"      // Define Schema\r",
							"      let schema = {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                  \"status\",\r",
							"                  \"status_desc\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                  \"status\": {\r",
							"                        \"type\": \"string\"\r",
							"                  },\r",
							"                  \"token\": {\r",
							"                        \"type\": \"string\"\r",
							"                  }\r",
							"            }\r",
							"      }\r",
							"      // Update environment with new Test Data\r",
							"      pm.environment.set(\"isfirstLogin\", isfirstLogin);\r",
							"      pm.environment.set(\"testData\", JSON.stringify(testData));\r",
							"      pm.environment.set(\"schema\", JSON.stringify(schema));\r",
							"}\r",
							"// Retrieve testData from the environment\r",
							"let testData = JSON.parse(pm.environment.get(\"testData\"))\r",
							"// Get the first test data set\r",
							"let currentTestData = testData.shift()\r",
							"// Initialize environment variables for the current iteration\r",
							"pm.environment.set(\"testData\", JSON.stringify(testData))\r",
							"pm.environment.set(\"currentTestData\", JSON.stringify(currentTestData))\r",
							"pm.environment.set(\"currentEmailAddress\", currentTestData.EmailAddress)\r",
							"pm.environment.set(\"currentPassword\", currentTestData.Password)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded____________",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/HoGo/api/v1/Login?EmailAddress={{currentEmailAddress}}&Password={{currentPassword}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"HoGo",
						"api",
						"v1",
						"Login"
					],
					"query": [
						{
							"key": "EmailAddress",
							"value": "{{currentEmailAddress}}"
						},
						{
							"key": "Password",
							"value": "{{currentPassword}}"
						}
					]
				}
			},
			"response": []
		}
	]
}