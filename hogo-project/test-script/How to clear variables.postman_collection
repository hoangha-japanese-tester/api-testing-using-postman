{
	"info": {
		"_postman_id": "438da097-3c27-4bbf-b754-62fd5c5be00c",
		"name": "Hogo_Login",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16137040",
		"_collection_link": "https://lively-spaceship-121921.postman.co/workspace/Test_Notion~03cfd9f8-641b-45be-a35d-1d2922c671e7/collection/16137040-438da097-3c27-4bbf-b754-62fd5c5be00c?action=share&source=collection_link&creator=16137040"
	},
	"item": [
		{
			"name": "How to clear variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extract the token from the response\r",
							"let dataResponse = pm.response.json() \r",
							"let token = dataResponse.token\r",
							"// Set the token as a variable in the environment to call the other request.\r",
							"pm.environment.set(\"token\",token)\r",
							"\r",
							"// Write test script test check login success\r",
							"pm.test(\"Verify login success. Token = \"+token, function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"\r",
							"// Clear variables in the environment after the test has been completed.\r",
							"// In the environment, there are variables such as 'url', 'token', 'TestcaseName', 'EmailAddress', 'Password'.\r",
							"// 'url' and 'token' are variables that may need to be retained for the next API.\r",
							"// 'TestcaseName', 'EmailAddress', 'Password' are variables that need to be deleted.\r",
							"\r",
							"\r",
							"// 3. Clear specific variables while retaining common variables like the 'url' and the 'token' variable.\r",
							"// We may not know the exact number of variables generated through API calls, but we must retain common variables like 'url' and 'token'.\r",
							"\r",
							"// // Define an array of common variables to be retained\r",
							"let commonVariables = [\"url\",\"token\"];\r",
							"// Convert all environment variables to an object for iteration\r",
							"let environmentVariables = pm.environment.toObject();\r",
							"// Loop through the environment variables and if that variable doesn't exist in commonVariables, delete it.\r",
							"for (let variable in environmentVariables) {\r",
							"    if (!commonVariables.includes(variable)) {\r",
							"        pm.environment.unset(variable);\r",
							"    }\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Create test data\r",
							"let TestcaseName = \"Verify login success with valid account.\"\r",
							"let EmailAddress = \"apitestingwithme@gmail.com\"\r",
							"let Password = \"12a1bc88fb7d9b5e1da6604570ec2f36\"\r",
							"\r",
							"// Set data test as variable in the environment\r",
							"pm.environment.set(\"TestcaseName\",TestcaseName)\r",
							"pm.environment.set(\"EmailAddress\",EmailAddress)\r",
							"pm.environment.set(\"Password\",Password)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded____________",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/HoGo/api/v1/Login?EmailAddress={{EmailAddress}}&Password={{Password}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"HoGo",
						"api",
						"v1",
						"Login"
					],
					"query": [
						{
							"key": "EmailAddress",
							"value": "{{EmailAddress}}"
						},
						{
							"key": "Password",
							"value": "{{Password}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}