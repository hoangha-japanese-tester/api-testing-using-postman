{
	"info": {
		"_postman_id": "9985e7e2-22b5-40c9-9d69-f30ffd28ace2",
		"name": "Hogo_Login_Notion",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16137040",
		"_collection_link": "https://lively-spaceship-121921.postman.co/workspace/Test_Notion~03cfd9f8-641b-45be-a35d-1d2922c671e7/collection/16137040-9985e7e2-22b5-40c9-9d69-f30ffd28ace2?action=share&source=collection_link&creator=16137040"
	},
	"item": [
		{
			"name": "HOGO_Post-Logout Session Expiry Test",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve firstLogin variable from the environment\r",
									"let firstLogin = pm.environment.get(\"firstLogin\")\r",
									"\r",
									"// Check whether this is the first time calling the API Login.\r",
									"// If this is the first time calling the API Login, we will set up test data.\r",
									"// If this is not the first time calling the API Login, we will use the test data retrieved from the environment.\r",
									"if (firstLogin !== \"This is not the first login\"){\r",
									"\t// Set up test data as an array of objects\r",
									"    let testData  = [\r",
									"        {\r",
									"            TestcaseID: \"1\",\r",
									"            TestcaseName: \"Verify SessionID expire after logout (KeepMeLogin = true)\",\r",
									"            EmailAddress: \"apitestingwithme@gmail.com\",\r",
									"            Password: \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
									"            KeepMeLogin: true\r",
									"        },\r",
									"        {\r",
									"            TestcaseID: \"2\",\r",
									"            TestcaseName: \"Verify SessionID expire after logout (KeepMeLogin = false)\",\r",
									"            EmailAddress: \"apitestingwithme@gmail.com\",\r",
									"            Password: \"12a1bc88fb7d9b5e1da6604570ec2f36\",\r",
									"            KeepMeLogin: false\r",
									"        }        \r",
									"    ];\r",
									"    // Update environment with new Test Data\r",
									"    pm.environment.set(\"firstLogin\", \"This is not the first login\");\r",
									"    pm.environment.set(\"testData\", JSON.stringify(testData));\r",
									"}\r",
									"// Retrieve testData from the environment\r",
									"let testData = JSON.parse(pm.environment.get(\"testData\"))\r",
									"\r",
									"// Get the first test data object\r",
									"// Initialize environment variables for the current iteration\r",
									"let currentTestData = testData.shift(); \r",
									"pm.environment.set(\"currentTestcaseID\", currentTestData.TestcaseID);\r",
									"pm.environment.set(\"currentTestcaseName\", currentTestData.TestcaseName);\r",
									"pm.environment.set(\"currentEmailAddress\", currentTestData.EmailAddress);\r",
									"pm.environment.set(\"currentPassword\", currentTestData.Password);\r",
									"pm.environment.set(\"currentKeepMeLogin\", currentTestData.KeepMeLogin);\r",
									"pm.environment.set(\"testData\", JSON.stringify(testData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract the JSON data from the response\r",
									"let dataResponse = pm.response.json()\r",
									"\r",
									"// Retrieve the current testcase name and ID from the environment\r",
									"let currentTestcaseName = pm.environment.get(\"currentTestcaseName\")\r",
									"let currentTestcaseID = pm.environment.get(\"currentTestcaseID\")\r",
									"\r",
									"// Define a Postman test script to validate the login success scenario\r",
									"pm.test(\"TC\"+currentTestcaseID+\": \" +currentTestcaseName + \". Result: Login success\", function () {\r",
									"\t\t// Check if the response status is \"OK\" indicating successful login\r",
									"    if (dataResponse.status === \"OK\"){\r",
									"\t\t// Expect that the response text includes the keyword \"token\"\r",
									"        pm.expect(pm.response.text()).to.include(\"token\");\r",
									"\t\t// Set the retrieved token from data respone in the environment for the next request\r",
									"        pm.environment.set(\"token\",dataResponse.token)\r",
									"\t\t// Set the next request to \"Get Doc Success_Session maintain\" to demonstrate SessionID still maintained\r",
									"        postman.setNextRequest(\"Get Doc Success_Session maintain\")\r",
									"    } else {\r",
									"\t\t// If login fails, fail the test and provide an error message\r",
									"        pm.expect.fail(\"Login fail. Error Message: \"+ dataResponse.status);\r",
									"\t}\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded____________",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/HoGo/api/v1/Login?EmailAddress={{currentEmailAddress}}&Password={{currentPassword}}&KeepMeLogin={{currentKeepMeLogin}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"HoGo",
								"api",
								"v1",
								"Login"
							],
							"query": [
								{
									"key": "EmailAddress",
									"value": "{{currentEmailAddress}}"
								},
								{
									"key": "Password",
									"value": "{{currentPassword}}"
								},
								{
									"key": "KeepMeLogin",
									"value": "{{currentKeepMeLogin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Doc Success_Session maintain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let dataRespone = pm.response.json()\r",
									"// Retrieve the token from the environment\r",
									"let token = pm.environment.get(\"token\")\r",
									"// Check if the response status is \"OK\"\r",
									"if (dataRespone.status === \"OK\"){\r",
									"// Test the scenario of GET document successfully with token retrieved from API Login\r",
									"    pm.test(\"Verify get doccument success. Token = \"+token, function () {\r",
									"\t\t\t\t// Expect that the response includes the attribute \"detail\"\r",
									"        pm.expect(pm.response.text()).to.include(\"detai\");\r",
									"    });\r",
									"\t\t// If get doccument success, set the next request to \"Logout\"\r",
									"    postman.setNextRequest(\"Logout\")\r",
									"}else{\r",
									"\t\t// Test the scenario of GET document failed with token retrieved from API Login\r",
									"    pm.test(\"Verify get doccument fail. Token = \"+token, function () {\r",
									"\t\t\t\t// Fail the test and provide an error message including the response status\r",
									"        pm.expect.fail(\"Message error: status = \"+dataRespone.status)\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/HoGo/api/v1/GetDocumentDetail?SessionID={{token}}&DocumentID=7ae93eae7bea4cb2b6b8ab10569e10e4",
							"host": [
								"{{url}}"
							],
							"path": [
								"HoGo",
								"api",
								"v1",
								"GetDocumentDetail"
							],
							"query": [
								{
									"key": "SessionID",
									"value": "{{token}}"
								},
								{
									"key": "DocumentID",
									"value": "7ae93eae7bea4cb2b6b8ab10569e10e4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let dataRespone = pm.response.json()\r",
									"// Retrieve the token from the environment\r",
									"let token = pm.environment.get(\"token\")\r",
									"// Check if the response status is \"OK\"\r",
									"if (dataRespone.status === \"OK\"){\r",
									"\t\t// Test the scenario of successful logout with the provided token\r",
									"    pm.test(\"Verify logout success. Token = \"+token, function () {\r",
									"\t\t// Expect that the response status is \"OK\" if logout success\r",
									"        pm.expect(dataRespone.status).to.eql(\"OK\");\r",
									"    });\r",
									"\t\t// Set the next request to \"Get Doc Fail_Session expire\" to demonstrate session expiration\r",
									"    postman.setNextRequest(\"Get Doc Fail_Session expire\")\r",
									"}else{\r",
									"\t\t// Test the scenario of failed logout with the provided token\r",
									"    pm.test(\"Verify logout fail. Token = \"+token, function () {\r",
									"\t\t// Fail the test and provide an error message including the status description\r",
									"        pm.expect.fail(\"Message error: status_desc = \"+dataRespone.status_desc)\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "SessionID",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/HoGo/api/v1/Logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"HoGo",
								"api",
								"v1",
								"Logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Doc Fail_Session expire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let dataRespone = pm.response.json()\r",
									"// Retrieve the token from the environment\r",
									"let token = pm.environment.get(\"token\")\r",
									"// Test the scenario of failed document due to expired SessionID after log out\r",
									"pm.test(\"Verify get doc Fail because SessionID was expired after log out. Token = \"+token+ \". Message = \"+dataRespone.status, function () {\r",
									"    if (dataRespone.status ===\"SessionIdNotFound\"){\r",
									"\t\t\t\t// Expect that the status description indicates \"User must login\"\r",
									"        pm.expect(dataRespone.status_desc).to.eql(\"User must login\");\r",
									"    } else {\r",
									"\t\t\t\t// Fail the test if the session is maintained after log out\r",
									"        pm.expect.fail(\"Session maintain after log out: Status = \"+dataRespone.status)\r",
									"    }\r",
									"});\r",
									"// Determine whether this is the end of the iteration\r",
									"// If TestcaseName.length > 0, continue to the next iteration\r",
									"// If TestcaseName.length = 0, stop the iteration and clear variables created during the script run\r",
									"// The environment will retain common variables and clear variables generated during script run\r",
									"\r",
									"// Define an array of common variables to be retained\r",
									"let commonVariables = [\"schema\",\"commonTest\",\"url\"];\r",
									"// Convert all environment variables to an object for iteration\r",
									"let environmentVariables = pm.environment.toObject();\r",
									"\r",
									"// Check if there are remaining test cases to be executed\r",
									"let testData = JSON.parse(pm.environment.get(\"testData\"))\r",
									"if(testData.length > 0){\r",
									"\t\t// If there are remaining test cases, set the next request to \"Login\" for the next iteration\r",
									"    postman.setNextRequest(\"Login\")\r",
									"} else {\r",
									"\t\t// If all test cases have been executed, set the next request to null to end the script run\r",
									"    postman.setNextRequest(null)\r",
									"\t\t// Loop through the environment variables and unset (delete) non-common variables\r",
									"    for (let variable in environmentVariables) {\r",
									"        if (!commonVariables.includes(variable)) {\r",
									"            pm.environment.unset(variable);\r",
									"        }\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/HoGo/api/v1/GetDocumentDetail?SessionID={{token}}&DocumentID=7ae93eae7bea4cb2b6b8ab10569e10e4",
							"host": [
								"{{url}}"
							],
							"path": [
								"HoGo",
								"api",
								"v1",
								"GetDocumentDetail"
							],
							"query": [
								{
									"key": "SessionID",
									"value": "{{token}}"
								},
								{
									"key": "DocumentID",
									"value": "7ae93eae7bea4cb2b6b8ab10569e10e4"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "## A. Spec:\n\nThe API Login receives three request parameters: EmailAddress, Password, and KeepMeLogin. If the login is successful, a token (SessionID) will be generated for other API tasks. When KeepMeLogin is set to false, the SessionID will expire after 30 minutes.\n\n## B. **Test scenarios:**\n\nVerify after running the API Logout successfully, the SessionID must be expired.\n\n## C. Flow:\n\n1. Call API Login → Get Token (SessionID)\n2. Call API GET Document → Successfully get the document using SessionID from Step 1\n3. Call API Logout → SessionID deactive\n4. Call API GET Document → Fail to get the document using SessionID from Step 1 (Because the Session ID has already expired in Step 3)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}